# CircleCI configuration

version: 2.1
orbs:
  node: circleci/node@5.0.2
  slack: circleci/slack@4.10.1

# Shared configurations
aliases:
  shared_contexts: &shared_contexts
    context:
      - aptible-global
      - client-frontend-ci
      - client-frontend-development
      - github
  ramdisk_node_executor: &ramdisk_node_executor
    executor:
      name: node/default
    working_directory: /mnt/ramdisk
  install_ci: &install_ci npm ci --prefer-offline --no-audit
  configure_aptible_ssh: &configure_aptible_ssh
    run:
      name: Add Aptible host key
      command: |
        mkdir -p ~/.ssh
        echo $APTIBLE_SSH_HOST_KEY >> ~/.ssh/known_hosts
        echo $CIRCLE_SHA1 '->' master
  install_aptible: &install_aptible
    run:
      name: Install Aptible CLI
      command: |
        wget -O aptible-toolbelt.deb https://omnibus-aptible-toolbelt.s3.amazonaws.com/aptible/omnibus-aptible-toolbelt/master/340/pkg/aptible-toolbelt_0.19.3%2B20220317192542~ubuntu.16.04-1_amd64.deb
        sudo apt install ./aptible-toolbelt.deb
        ls -la ~/.ssh
  install_gh_cli: &install_gh_cli
    run:
      name: Install GitHub CLI
      command: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
        gh --version
  aptible_auth: &aptible_auth
    run:
      name: Aptible authentication
      command: aptible login --email=${APTIBLE_EMAIL} --password=${APTIBLE_PASSWORD}
  extract_pr_from_repo_tag: &extract_pr_from_repo_tag
    run:
      name: Extract pull request ID
      command: |
        echo "export GITHUB_PR=$(echo << pipeline.git.tag >> |  awk -F- '{print $2}')" >> "$BASH_ENV"
        source $BASH_ENV
        echo $GITHUB_PR

# Job definitions
jobs:
  install_deps:
    <<: *ramdisk_node_executor
    environment:
      NODE_ENV: development
    steps:
      - add_ssh_keys
      - *configure_aptible_ssh
      - checkout
      - node/install-packages:
          override-ci-command: *install_ci

  lint:
    <<: *ramdisk_node_executor
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: *install_ci
      - run: npm run lint

  typescript:
    <<: *ramdisk_node_executor
    steps:
      - checkout
      - node/install-packages
      - run: npm run tsc

  jest:
    <<: *ramdisk_node_executor
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
    parallelism: 2
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: *install_ci
      - run:
          name: Parallelize tests
          command: |
            TESTFILES=$(circleci tests glob "src/**/*.test.*" | circleci tests split --split-by=timings)
            npm run test $TESTFILES
      - store_test_results:
          path: reports

  playwright:
    docker:
      - image: mcr.microsoft.com/playwright:focal # should match Playwright version
    parallelism: 5
    environment:
      NODE_ENV: development
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: *install_ci
      - attach_workspace:
          at: .
      - run: PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npx playwright install
      - run:
          name: Parallelize tests
          command: |
            TESTFILES=$(circleci tests glob "tests/**/*.test.ts" | circleci tests split --split-by=timings)
            npm run playwright $TESTFILES
      - store_test_results:
          path: playwright-report/xml
      - store_artifacts:
          path: playwright-report
      - store_artifacts:
          path: tests/test-results

  build_js_bundle:
    <<: *ramdisk_node_executor
    resource_class: large
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: *install_ci
      - run: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .next

  # Intended to run after the API publishes and merges a new GQL schema into main
  codegen:
    <<: *ramdisk_node_executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "07:87:b9:c2:0f:da:3e:7f:f6:62:ad:4d:a5:af:c3:a9"
      - checkout
      - *install_gh_cli
      - node/install-packages:
          override-ci-command: *install_ci
      - run: npm run generate
      - run:
          name: Commit GraphQL Code Generator output if changed
          command: |
            if [ -n "$(git status --porcelain src/generated/graphql.tsx)" ]; then
              git config  user.email "it+deploy@findoctave.com"
              git config --global user.name "Octave Engineering"
              git checkout main
              git checkout -B gql-codegen-$CIRCLE_SHA1
              git add src/generated/graphql.tsx
              git commit -m "chore(codegen): 🤖 Automated GraphQL generation code update: $CIRCLE_SHA1" || true
              git push -f origin gql-codegen-$CIRCLE_SHA1

              gh pr create \
                --title "chore(codegen): 🤖 Automated GraphQL Code Geneator update" \
              --body "[beep boop bop] Generated code updated to match production GraphQL schema. Action required." || true
            fi

  deploy_custom_branch:
    <<: *ramdisk_node_executor
    steps:
      - add_ssh_keys
      - checkout
      - *configure_aptible_ssh
      - *extract_pr_from_repo_tag
      - *install_gh_cli
      - *install_aptible
      - *aptible_auth
      - run: aptible apps:create $GITHUB_PR || true # Previously provisioned apps will fail; always return true
      - run:
          name: Clone staging environment variables
          command: |
            aptible config --app client-frontend_staging | xargs aptible config:set --app $GITHUB_PR
      - run:
          name: Deploy branch
          command: |
            git remote add aptible "git@beta.aptible.com:octave-cortex/$GITHUB_PR.git"
            git fetch && git push --force aptible $CIRCLE_SHA1:refs/heads/master
      - run:
          name: Create endpoint
          command: aptible endpoints:https:create --app $GITHUB_PR --default-domain web || true # Previously provisioned endpoints will fail; always return true
      - run:
          name: Extract endpoint
          command: |
            DEPLOYMENT_ENDPOINT=$(aptible endpoints:list --app $GITHUB_PR | grep aptible.com | awk -F':' '{print $2}' | xargs)
            echo $DEPLOYMENT_ENDPOINT > deployment_endpoint.txt
            echo $DEPLOYMENT_ENDPOINT
      - run:
          name: Re-configure
          command: |
            aptible config:set --app=${GITHUB_PR} \
              AUTH0_REDIRECT_URI="https://${DEPLOYMENT_ENDPOINT}/auth/callback"
            # idk why you have to rebuild this for the config change to take effect, but
            # you do
            aptible rebuild --app=${GITHUB_PR}
      - run:
          name: Validate deprovisioning target
          command: |
            pattern="(^pr\d+$)"
            if [[ "$GITHUB_PR" =~ $PATTERN ]]; then exit 0; else exit 1; fi
      - run:
          name: Add endpoint to GitHub PR and update PR
          command: |
            DEPLOYMENT_ENDPOINT=$(<deployment_endpoint.txt)
            PR_ID=$(echo $GITHUB_PR | sed 's/^pr//')
            gh issue comment $PR_ID --body "📢 Deployment of $CIRCLE_SHA1 complete and is accessible at [$DEPLOYMENT_ENDPOINT](https://$DEPLOYMENT_ENDPOINT)"
            gh pr edit $PR_ID --add-label custom-deployment || true

  deprovision_deployment:
    <<: *ramdisk_node_executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "07:87:b9:c2:0f:da:3e:7f:f6:62:ad:4d:a5:af:c3:a9"
      - checkout
      - *configure_aptible_ssh
      - *extract_pr_from_repo_tag
      - *install_gh_cli
      - *install_aptible
      - *aptible_auth
      - run: aptible apps:deprovision --app=$GITHUB_PR || true # Unprovisioned apps will fail; always return true
      - run:
          name: Remove stale tags and update PR
          command: |
            nl=$'\n'
            PR_ID=$(echo $GITHUB_PR | sed 's/^pr//')
            echo "🗑️ Deprovisioning complete for #$PR_ID.${nl}" > body.txt
            echo '```' >> body.txt
            git tag | grep $GITHUB_PR | xargs -n 1 git push -v --delete origin >> body.txt 2>&1
            echo '```' >> body.txt
            gh issue comment $PR_ID --body-file body.txt
            gh pr edit $PR_ID --remove-label custom-deployment
      - store_artifacts:
          path: body.txt

  deploy_staging:
    <<: *ramdisk_node_executor
    steps:
      - add_ssh_keys
      - checkout
      - *configure_aptible_ssh
      - run: git remote add aptible 'git@beta.aptible.com:octave-cortex/client-frontend_staging.git'
      - run: git fetch && git push --force aptible $CIRCLE_SHA1:refs/heads/master

  deploy_production:
    <<: *ramdisk_node_executor
    steps:
      - add_ssh_keys
      - checkout
      - *install_gh_cli
      - *configure_aptible_ssh
      - run: git remote add aptible 'git@beta.aptible.com:octave-cortex/client-frontend_production.git'
      - run: git fetch && git push aptible $CIRCLE_SHA1:refs/heads/master --force
      - run:
          name: Create GitHub release
          command: |
            gh config set prompt disabled
            gh release create $CIRCLE_TAG \
              --repo $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
              --title "Release ${CIRCLE_TAG}" \
              --generate-notes

# Workflow aliases
development_only: &development_only
  <<: *shared_contexts
  filters:
    branches:
      ignore: main

staging_only: &staging_only
  <<: *shared_contexts
  filters:
    branches:
      only: main

production_only: &production_only
  <<: *shared_contexts
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /v[\d]{12}/

provision_deployment_only: &provision_deployment_only
  <<: *shared_contexts
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^deploy-.*/

deprovision_deployment_only: &deprovision_deployment_only
  <<: *shared_contexts
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^deprovision-.*/

# Workflow definitions
workflows:
  version: 2.1

  deploy_pr_to_aptible: # Only runs when a PR is opened or updated
    jobs:
      - install_deps:
          <<: *provision_deployment_only
      - lint:
          <<: *provision_deployment_only
          requires: [install_deps]
      - jest:
          <<: *provision_deployment_only
          requires: [install_deps]
      - build_js_bundle:
          <<: *provision_deployment_only
          requires: [install_deps]
      - playwright:
          <<: *provision_deployment_only
          requires: [build_js_bundle]
      - deploy_custom_branch:
          <<: *provision_deployment_only
          requires: [lint, jest, playwright]

  deprovision_aptible_resources: # Only runs when a PR is closed
    jobs:
      - deprovision_deployment:
          <<: *deprovision_deployment_only

  development: # This workflow runs on all commits
    jobs:
      - install_deps:
          <<: *development_only
      - lint:
          <<: *development_only
          requires: [install_deps]
      - typescript:
          <<: *development_only
          requires: [install_deps]
      - jest:
          <<: *development_only
          requires: [install_deps]
      - build_js_bundle:
          <<: *development_only
          requires: [install_deps]
      - playwright:
          <<: *development_only
          requires: [build_js_bundle]
  staging: # Will only run on 'main' and will not run on tags
    jobs:
      - install_deps:
          <<: *staging_only
      - lint:
          <<: *staging_only
          requires: [install_deps]
      - typescript:
          <<: *staging_only
          requires: [install_deps]
      - jest:
          <<: *staging_only
          requires: [install_deps]
      - build_js_bundle:
          <<: *staging_only
          requires: [install_deps]
      - codegen:
          <<: *staging_only
          requires: [install_deps]
      - playwright:
          <<: *staging_only
          requires: [build_js_bundle]
      - deploy_staging:
          <<: *staging_only
          requires: [lint, typescript, jest, playwright]

  production:
    jobs:
      - install_deps:
          <<: *production_only
      - lint:
          <<: *production_only
          requires: [install_deps]
      - typescript:
          <<: *production_only
          requires: [install_deps]
      - jest:
          <<: *production_only
          requires: [install_deps]
      - build_js_bundle:
          <<: *production_only
          requires: [install_deps]
      - playwright:
          <<: *production_only
          requires: [build_js_bundle]
      - slack/on-hold:
          <<: *production_only
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":typingcat: Production `client-frontend` deployment at `${CIRCLE_TAG}` requested by `${CIRCLE_USERNAME}`"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "An _approval is required_ to begin production deployment."
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": ":point_right:  Visit Staging",
                        "emoji": true
                      },
                      "value": "outgoing",
                      "url": "https://my-staging.findoctave.com/onboarding",
                      "action_id": "button-action-visit-staging"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": ":squirrel:  Approve and Deploy",
                        "emoji": true
                      },
                      "value": "outgoing",
                      "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}",
                      "action_id": "button-action-workflow"
                    }
                  ]
                }
              ]
            }
          requires: [playwright]
      - pause-workflow:
          <<: *production_only
          type: approval
          requires: [slack/on-hold]
      - deploy_production:
          <<: *production_only
          requires: [pause-workflow]
      - slack/notify:
          <<: *production_only
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":squirrel: `client-frontend` has been deployed to production.
                  }
                }
              ]
            }
          requires: [deploy_production]

# VS Code Extension Version: 1.0.0